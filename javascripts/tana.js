// Generated by CoffeeScript 1.6.2
var Tana;

Tana = (function() {
  function Tana(di) {
    this.di = di;
  }

  Tana.prototype.util_round = function(list) {
    return list.map(function(x) {
      if (x != null) {
        return Math.round(x * 100) / 100;
      }
    });
  };

  Tana.prototype.util_ema = function(period, list) {
    var prefix, target;

    prefix = list.filter(function(x) {
      return x == null;
    });
    target = list.filter(function(x) {
      return x != null;
    });
    return prefix.concat(this.EMA(period, target, false));
  };

  Tana.prototype.MA = function(period, target, round) {
    var current_ma, i, ma, sum, _i, _j, _ref;

    if (period == null) {
      period = 20;
    }
    if (target == null) {
      target = this.di;
    }
    if (round == null) {
      round = true;
    }
    if (!((1 <= period && period <= target.length))) {
      return void 0;
    }
    ma = [];
    for (i = _i = 1; 1 <= period ? _i < period : _i > period; i = 1 <= period ? ++_i : --_i) {
      ma.push(void 0);
    }
    sum = target.slice(0, period).reduce(function(a, e) {
      return a + e;
    });
    current_ma = sum / period;
    ma.push(current_ma);
    for (i = _j = period, _ref = target.length; period <= _ref ? _j < _ref : _j > _ref; i = period <= _ref ? ++_j : --_j) {
      ma.push(current_ma += (target[i] - target[i - period]) / period);
    }
    if (round) {
      return this.util_round(ma);
    } else {
      return ma;
    }
  };

  Tana.prototype.EMA = function(period, target, round) {
    var alpha, current_ema, ema, i, sum, _i, _j, _ref;

    if (period == null) {
      period = 20;
    }
    if (target == null) {
      target = this.di;
    }
    if (round == null) {
      round = true;
    }
    if (!((1 <= period && period <= target.length))) {
      return void 0;
    }
    alpha = 2 / (period + 1);
    ema = [];
    for (i = _i = 1; 1 <= period ? _i < period : _i > period; i = 1 <= period ? ++_i : --_i) {
      ema.push(void 0);
    }
    sum = target.slice(0, period).reduce(function(a, e) {
      return a + e;
    });
    current_ema = sum / period;
    ema.push(current_ema);
    for (i = _j = period, _ref = target.length; period <= _ref ? _j < _ref : _j > _ref; i = period <= _ref ? ++_j : --_j) {
      ema.push(current_ema = ema[i - 1] + alpha * (target[i] - ema[i - 1]));
    }
    if (round) {
      return this.util_round(ema);
    } else {
      return ema;
    }
  };

  Tana.prototype.MACD = function(short, long, ema_period) {
    var dif, ema_long, ema_short, i, macd, osc;

    if (short == null) {
      short = 12;
    }
    if (long == null) {
      long = 26;
    }
    if (ema_period == null) {
      ema_period = 9;
    }
    if (!(1 <= Math.min(short, long, ema_period) && Math.max(short, long, ema_period) <= this.di.length)) {
      return;
    }
    ema_short = this.util_ema(short, this.di);
    ema_long = this.util_ema(long, this.di);
    dif = (function() {
      var _i, _ref, _results;

      _results = [];
      for (i = _i = 0, _ref = ema_short.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (ema_short[i] !== void 0 && ema_long[i] !== void 0) {
          _results.push(ema_short[i] - ema_long[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    })();
    macd = this.util_ema(ema_period, dif);
    osc = (function() {
      var _i, _ref, _results;

      _results = [];
      for (i = _i = 0, _ref = ema_short.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (dif[i] !== void 0 && macd[i] !== void 0) {
          _results.push(dif[i] - macd[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    })();
    return {
      DIF: this.util_round(dif),
      MACD: this.util_round(macd),
      OSC: this.util_round(osc)
    };
  };

  Tana.prototype.KDJ = function(period) {
    var high, i, low;

    if (period == null) {
      period = 9;
    }
    if (!((1 <= period && period <= this.di.length))) {
      return void 0;
    }
    high = (function() {
      var _i, _ref, _results;

      _results = [];
      for (i = _i = 0, _ref = this.di.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i < period - 1) {
          _results.push(void 0);
        } else {
          _results.push(this.di.slice(i - period + 1, i + 1).reduce(function(a, b) {
            return Math.max(a, b);
          }));
        }
      }
      return _results;
    }).call(this);
    low = (function() {
      var _i, _ref, _results;

      _results = [];
      for (i = _i = 0, _ref = this.di.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i < period - 1) {
          _results.push(void 0);
        } else {
          _results.push(this.di.slice(i - period + 1, i + 1).reduce(function(a, b) {
            return Math.min(a, b);
          }));
        }
      }
      return _results;
    }).call(this);
    console.log(high);
    return console.log(low);
  };

  return Tana;

})();
